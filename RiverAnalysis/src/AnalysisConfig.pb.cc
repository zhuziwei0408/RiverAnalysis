// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AnalysisConfig.proto

#include "../include/AnalysisConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_AnalysisConfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_AnalysisConfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AnalysisRect;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_AnalysisConfig_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AlgorithmConfig;
}  // namespace protobuf_AnalysisConfig_2eproto
class ConfigListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigList>
      _instance;
} _ConfigList_default_instance_;
class AnalysisRectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalysisRect>
      _instance;
} _AnalysisRect_default_instance_;
class AlgorithmConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AlgorithmConfig>
      _instance;
} _AlgorithmConfig_default_instance_;
class AnalysisConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalysisConfig>
      _instance;
} _AnalysisConfig_default_instance_;
class AnalysisAlarmDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalysisAlarm>
      _instance;
} _AnalysisAlarm_default_instance_;
namespace protobuf_AnalysisConfig_2eproto {
static void InitDefaultsConfigList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConfigList_default_instance_;
    new (ptr) ::ConfigList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConfigList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigList}, {}};

static void InitDefaultsAnalysisRect() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AnalysisRect_default_instance_;
    new (ptr) ::AnalysisRect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AnalysisRect::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AnalysisRect =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAnalysisRect}, {}};

static void InitDefaultsAlgorithmConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AlgorithmConfig_default_instance_;
    new (ptr) ::AlgorithmConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AlgorithmConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AlgorithmConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAlgorithmConfig}, {
      &protobuf_AnalysisConfig_2eproto::scc_info_AnalysisRect.base,}};

static void InitDefaultsAnalysisConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AnalysisConfig_default_instance_;
    new (ptr) ::AnalysisConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AnalysisConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AnalysisConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAnalysisConfig}, {
      &protobuf_AnalysisConfig_2eproto::scc_info_AlgorithmConfig.base,}};

static void InitDefaultsAnalysisAlarm() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AnalysisAlarm_default_instance_;
    new (ptr) ::AnalysisAlarm();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AnalysisAlarm::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AnalysisAlarm =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAnalysisAlarm}, {
      &protobuf_AnalysisConfig_2eproto::scc_info_AnalysisRect.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnalysisRect.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AlgorithmConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnalysisConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnalysisAlarm.base);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ConfigList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ConfigList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ConfigList, model_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ConfigList, configs_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AnalysisRect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AnalysisRect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AnalysisRect, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AnalysisRect, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AnalysisRect, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AnalysisRect, height_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AlgorithmConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AlgorithmConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AlgorithmConfig, algorithm_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AlgorithmConfig, detect_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AlgorithmConfig, water_gauge_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AlgorithmConfig, display_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AlgorithmConfig, roi_rects_),
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AnalysisConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AnalysisConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AnalysisConfig, video_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AnalysisConfig, input_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AnalysisConfig, output_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AnalysisConfig, ttc_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AnalysisConfig, send_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AnalysisConfig, detect_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AnalysisConfig, display_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AnalysisConfig, open_modeling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AnalysisConfig, algorithms_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AnalysisAlarm, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AnalysisAlarm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AnalysisAlarm, is_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AnalysisAlarm, scene_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AnalysisAlarm, water_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AnalysisAlarm, floater_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AnalysisAlarm, floater_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AnalysisAlarm, water_gauge_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AnalysisAlarm, rects_),
  1,
  2,
  0,
  3,
  4,
  5,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::ConfigList)},
  { 9, 18, sizeof(::AnalysisRect)},
  { 22, 32, sizeof(::AlgorithmConfig)},
  { 37, 51, sizeof(::AnalysisConfig)},
  { 60, 72, sizeof(::AnalysisAlarm)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ConfigList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_AnalysisRect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_AlgorithmConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_AnalysisConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_AnalysisAlarm_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "AnalysisConfig.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024AnalysisConfig.proto\"1\n\nConfigList\022\022\n\n"
      "model_path\030\001 \002(\t\022\017\n\007configs\030\002 \003(\t\"C\n\014Ana"
      "lysisRect\022\t\n\001x\030\001 \002(\r\022\t\n\001y\030\002 \002(\r\022\r\n\005width"
      "\030\003 \002(\r\022\016\n\006height\030\004 \002(\r\"\241\001\n\017AlgorithmConf"
      "ig\022&\n\016algorithm_type\030\001 \002(\0162\016.AlgorithmTy"
      "pe\022\027\n\017detect_interval\030\002 \002(\r\022\032\n\022water_gau"
      "ge_length\030\003 \001(\002\022\017\n\007display\030\004 \001(\010\022 \n\troi_"
      "rects\030\005 \003(\0132\r.AnalysisRect\"\324\001\n\016AnalysisC"
      "onfig\022\020\n\010video_id\030\001 \002(\t\022\021\n\tinput_url\030\002 \002"
      "(\t\022\022\n\noutput_url\030\003 \002(\t\022\020\n\010ttc_path\030\004 \002(\t"
      "\022\020\n\010send_url\030\005 \002(\t\022\027\n\017detect_interval\030\006 "
      "\002(\r\022\017\n\007display\030\007 \001(\010\022\025\n\ropen_modeling\030\010 "
      "\001(\010\022$\n\nalgorithms\030\t \003(\0132\020.AlgorithmConfi"
      "g\"\277\001\n\rAnalysisAlarm\022\021\n\tis_active\030\001 \002(\010\022\""
      "\n\nscene_type\030\002 \002(\0162\016.AlgorithmType\022\023\n\013wa"
      "ter_color\030\003 \001(\t\022\024\n\014floater_area\030\004 \001(\002\022\025\n"
      "\rfloater_speed\030\005 \001(\002\022\027\n\017water_gauge_num\030"
      "\006 \001(\002\022\034\n\005rects\030\007 \003(\0132\r.AnalysisRect*\220\001\n\r"
      "AlgorithmType\022\r\n\tSEGMANTIC\020\000\022\013\n\007FLOATER\020"
      "\001\022\016\n\nWATERGAUGE\020\002\022\n\n\006LITTER\020\003\022\010\n\004SAND\020\004\022"
      "\013\n\007FISHING\020\005\022\013\n\007SWIMING\020\006\022\007\n\003DAM\020\007\022\016\n\nWA"
      "TERCOLOR\020\010\022\n\n\006INVADE\020\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 862);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AnalysisConfig.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_AnalysisConfig_2eproto
const ::google::protobuf::EnumDescriptor* AlgorithmType_descriptor() {
  protobuf_AnalysisConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_AnalysisConfig_2eproto::file_level_enum_descriptors[0];
}
bool AlgorithmType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ConfigList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigList::kModelPathFieldNumber;
const int ConfigList::kConfigsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigList::ConfigList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_AnalysisConfig_2eproto::scc_info_ConfigList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigList)
}
ConfigList::ConfigList(const ConfigList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      configs_(from.configs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model_path()) {
    model_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_path_);
  }
  // @@protoc_insertion_point(copy_constructor:ConfigList)
}

void ConfigList::SharedCtor() {
  model_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ConfigList::~ConfigList() {
  // @@protoc_insertion_point(destructor:ConfigList)
  SharedDtor();
}

void ConfigList::SharedDtor() {
  model_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigList::descriptor() {
  ::protobuf_AnalysisConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AnalysisConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigList& ConfigList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_AnalysisConfig_2eproto::scc_info_ConfigList.base);
  return *internal_default_instance();
}


void ConfigList::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfigList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    model_path_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string model_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_path().data(), static_cast<int>(this->model_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ConfigList.model_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string configs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_configs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->configs(this->configs_size() - 1).data(),
            static_cast<int>(this->configs(this->configs_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ConfigList.configs");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigList)
  return false;
#undef DO_
}

void ConfigList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_path().data(), static_cast<int>(this->model_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConfigList.model_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_path(), output);
  }

  // repeated string configs = 2;
  for (int i = 0, n = this->configs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->configs(i).data(), static_cast<int>(this->configs(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConfigList.configs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->configs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigList)
}

::google::protobuf::uint8* ConfigList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ConfigList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_path().data(), static_cast<int>(this->model_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConfigList.model_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_path(), target);
  }

  // repeated string configs = 2;
  for (int i = 0, n = this->configs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->configs(i).data(), static_cast<int>(this->configs(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConfigList.configs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->configs(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigList)
  return target;
}

size_t ConfigList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfigList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string model_path = 1;
  if (has_model_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_path());
  }
  // repeated string configs = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->configs_size());
  for (int i = 0, n = this->configs_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->configs(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConfigList)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConfigList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConfigList)
    MergeFrom(*source);
  }
}

void ConfigList::MergeFrom(const ConfigList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConfigList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configs_.MergeFrom(from.configs_);
  if (from.has_model_path()) {
    set_has_model_path();
    model_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_path_);
  }
}

void ConfigList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConfigList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigList::CopyFrom(const ConfigList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfigList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ConfigList::Swap(ConfigList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigList::InternalSwap(ConfigList* other) {
  using std::swap;
  configs_.InternalSwap(CastToBase(&other->configs_));
  model_path_.Swap(&other->model_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigList::GetMetadata() const {
  protobuf_AnalysisConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AnalysisConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AnalysisRect::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalysisRect::kXFieldNumber;
const int AnalysisRect::kYFieldNumber;
const int AnalysisRect::kWidthFieldNumber;
const int AnalysisRect::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalysisRect::AnalysisRect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_AnalysisConfig_2eproto::scc_info_AnalysisRect.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:AnalysisRect)
}
AnalysisRect::AnalysisRect(const AnalysisRect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:AnalysisRect)
}

void AnalysisRect::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&x_)) + sizeof(height_));
}

AnalysisRect::~AnalysisRect() {
  // @@protoc_insertion_point(destructor:AnalysisRect)
  SharedDtor();
}

void AnalysisRect::SharedDtor() {
}

void AnalysisRect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AnalysisRect::descriptor() {
  ::protobuf_AnalysisConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AnalysisConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnalysisRect& AnalysisRect::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_AnalysisConfig_2eproto::scc_info_AnalysisRect.base);
  return *internal_default_instance();
}


void AnalysisRect::Clear() {
// @@protoc_insertion_point(message_clear_start:AnalysisRect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&x_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AnalysisRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AnalysisRect)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AnalysisRect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AnalysisRect)
  return false;
#undef DO_
}

void AnalysisRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AnalysisRect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // required uint32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  // required uint32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->width(), output);
  }

  // required uint32 height = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AnalysisRect)
}

::google::protobuf::uint8* AnalysisRect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AnalysisRect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // required uint32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  // required uint32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->width(), target);
  }

  // required uint32 height = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AnalysisRect)
  return target;
}

size_t AnalysisRect::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AnalysisRect)
  size_t total_size = 0;

  if (has_x()) {
    // required uint32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x());
  }

  if (has_y()) {
    // required uint32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->y());
  }

  if (has_width()) {
    // required uint32 width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  if (has_height()) {
    // required uint32 height = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  return total_size;
}
size_t AnalysisRect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AnalysisRect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x());

    // required uint32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->y());

    // required uint32 width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());

    // required uint32 height = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalysisRect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AnalysisRect)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalysisRect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnalysisRect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AnalysisRect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AnalysisRect)
    MergeFrom(*source);
  }
}

void AnalysisRect::MergeFrom(const AnalysisRect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AnalysisRect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AnalysisRect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AnalysisRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalysisRect::CopyFrom(const AnalysisRect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AnalysisRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalysisRect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void AnalysisRect::Swap(AnalysisRect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalysisRect::InternalSwap(AnalysisRect* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AnalysisRect::GetMetadata() const {
  protobuf_AnalysisConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AnalysisConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AlgorithmConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlgorithmConfig::kAlgorithmTypeFieldNumber;
const int AlgorithmConfig::kDetectIntervalFieldNumber;
const int AlgorithmConfig::kWaterGaugeLengthFieldNumber;
const int AlgorithmConfig::kDisplayFieldNumber;
const int AlgorithmConfig::kRoiRectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlgorithmConfig::AlgorithmConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_AnalysisConfig_2eproto::scc_info_AlgorithmConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:AlgorithmConfig)
}
AlgorithmConfig::AlgorithmConfig(const AlgorithmConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      roi_rects_(from.roi_rects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&algorithm_type_, &from.algorithm_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&display_) -
    reinterpret_cast<char*>(&algorithm_type_)) + sizeof(display_));
  // @@protoc_insertion_point(copy_constructor:AlgorithmConfig)
}

void AlgorithmConfig::SharedCtor() {
  ::memset(&algorithm_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&display_) -
      reinterpret_cast<char*>(&algorithm_type_)) + sizeof(display_));
}

AlgorithmConfig::~AlgorithmConfig() {
  // @@protoc_insertion_point(destructor:AlgorithmConfig)
  SharedDtor();
}

void AlgorithmConfig::SharedDtor() {
}

void AlgorithmConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AlgorithmConfig::descriptor() {
  ::protobuf_AnalysisConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AnalysisConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AlgorithmConfig& AlgorithmConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_AnalysisConfig_2eproto::scc_info_AlgorithmConfig.base);
  return *internal_default_instance();
}


void AlgorithmConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:AlgorithmConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roi_rects_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&algorithm_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&display_) -
        reinterpret_cast<char*>(&algorithm_type_)) + sizeof(display_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AlgorithmConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AlgorithmConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AlgorithmType algorithm_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AlgorithmType_IsValid(value)) {
            set_algorithm_type(static_cast< ::AlgorithmType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 detect_interval = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_detect_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &detect_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float water_gauge_length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_water_gauge_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &water_gauge_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool display = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_display();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AnalysisRect roi_rects = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_roi_rects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AlgorithmConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AlgorithmConfig)
  return false;
#undef DO_
}

void AlgorithmConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AlgorithmConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .AlgorithmType algorithm_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->algorithm_type(), output);
  }

  // required uint32 detect_interval = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->detect_interval(), output);
  }

  // optional float water_gauge_length = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->water_gauge_length(), output);
  }

  // optional bool display = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->display(), output);
  }

  // repeated .AnalysisRect roi_rects = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roi_rects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->roi_rects(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AlgorithmConfig)
}

::google::protobuf::uint8* AlgorithmConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AlgorithmConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .AlgorithmType algorithm_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->algorithm_type(), target);
  }

  // required uint32 detect_interval = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->detect_interval(), target);
  }

  // optional float water_gauge_length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->water_gauge_length(), target);
  }

  // optional bool display = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->display(), target);
  }

  // repeated .AnalysisRect roi_rects = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roi_rects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->roi_rects(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AlgorithmConfig)
  return target;
}

size_t AlgorithmConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AlgorithmConfig)
  size_t total_size = 0;

  if (has_algorithm_type()) {
    // required .AlgorithmType algorithm_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->algorithm_type());
  }

  if (has_detect_interval()) {
    // required uint32 detect_interval = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->detect_interval());
  }

  return total_size;
}
size_t AlgorithmConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AlgorithmConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .AlgorithmType algorithm_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->algorithm_type());

    // required uint32 detect_interval = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->detect_interval());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .AnalysisRect roi_rects = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->roi_rects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->roi_rects(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional float water_gauge_length = 3;
    if (has_water_gauge_length()) {
      total_size += 1 + 4;
    }

    // optional bool display = 4;
    if (has_display()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlgorithmConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AlgorithmConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AlgorithmConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AlgorithmConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AlgorithmConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AlgorithmConfig)
    MergeFrom(*source);
  }
}

void AlgorithmConfig::MergeFrom(const AlgorithmConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AlgorithmConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roi_rects_.MergeFrom(from.roi_rects_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      algorithm_type_ = from.algorithm_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      detect_interval_ = from.detect_interval_;
    }
    if (cached_has_bits & 0x00000004u) {
      water_gauge_length_ = from.water_gauge_length_;
    }
    if (cached_has_bits & 0x00000008u) {
      display_ = from.display_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AlgorithmConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AlgorithmConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlgorithmConfig::CopyFrom(const AlgorithmConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AlgorithmConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgorithmConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->roi_rects())) return false;
  return true;
}

void AlgorithmConfig::Swap(AlgorithmConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlgorithmConfig::InternalSwap(AlgorithmConfig* other) {
  using std::swap;
  CastToBase(&roi_rects_)->InternalSwap(CastToBase(&other->roi_rects_));
  swap(algorithm_type_, other->algorithm_type_);
  swap(detect_interval_, other->detect_interval_);
  swap(water_gauge_length_, other->water_gauge_length_);
  swap(display_, other->display_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AlgorithmConfig::GetMetadata() const {
  protobuf_AnalysisConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AnalysisConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AnalysisConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalysisConfig::kVideoIdFieldNumber;
const int AnalysisConfig::kInputUrlFieldNumber;
const int AnalysisConfig::kOutputUrlFieldNumber;
const int AnalysisConfig::kTtcPathFieldNumber;
const int AnalysisConfig::kSendUrlFieldNumber;
const int AnalysisConfig::kDetectIntervalFieldNumber;
const int AnalysisConfig::kDisplayFieldNumber;
const int AnalysisConfig::kOpenModelingFieldNumber;
const int AnalysisConfig::kAlgorithmsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalysisConfig::AnalysisConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_AnalysisConfig_2eproto::scc_info_AnalysisConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:AnalysisConfig)
}
AnalysisConfig::AnalysisConfig(const AnalysisConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      algorithms_(from.algorithms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  video_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_video_id()) {
    video_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_id_);
  }
  input_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_input_url()) {
    input_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_url_);
  }
  output_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_output_url()) {
    output_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_url_);
  }
  ttc_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ttc_path()) {
    ttc_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ttc_path_);
  }
  send_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_send_url()) {
    send_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_url_);
  }
  ::memcpy(&detect_interval_, &from.detect_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&open_modeling_) -
    reinterpret_cast<char*>(&detect_interval_)) + sizeof(open_modeling_));
  // @@protoc_insertion_point(copy_constructor:AnalysisConfig)
}

void AnalysisConfig::SharedCtor() {
  video_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ttc_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&detect_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&open_modeling_) -
      reinterpret_cast<char*>(&detect_interval_)) + sizeof(open_modeling_));
}

AnalysisConfig::~AnalysisConfig() {
  // @@protoc_insertion_point(destructor:AnalysisConfig)
  SharedDtor();
}

void AnalysisConfig::SharedDtor() {
  video_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ttc_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AnalysisConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AnalysisConfig::descriptor() {
  ::protobuf_AnalysisConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AnalysisConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnalysisConfig& AnalysisConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_AnalysisConfig_2eproto::scc_info_AnalysisConfig.base);
  return *internal_default_instance();
}


void AnalysisConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:AnalysisConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  algorithms_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      video_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      input_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      output_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      ttc_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      send_url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&detect_interval_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&open_modeling_) -
        reinterpret_cast<char*>(&detect_interval_)) + sizeof(open_modeling_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AnalysisConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AnalysisConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string video_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->video_id().data(), static_cast<int>(this->video_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AnalysisConfig.video_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string input_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input_url().data(), static_cast<int>(this->input_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AnalysisConfig.input_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string output_url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->output_url().data(), static_cast<int>(this->output_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AnalysisConfig.output_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string ttc_path = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ttc_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ttc_path().data(), static_cast<int>(this->ttc_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AnalysisConfig.ttc_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string send_url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_send_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->send_url().data(), static_cast<int>(this->send_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AnalysisConfig.send_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 detect_interval = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_detect_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &detect_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool display = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_display();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool open_modeling = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_open_modeling();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_modeling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AlgorithmConfig algorithms = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_algorithms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AnalysisConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AnalysisConfig)
  return false;
#undef DO_
}

void AnalysisConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AnalysisConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string video_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_id().data(), static_cast<int>(this->video_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AnalysisConfig.video_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->video_id(), output);
  }

  // required string input_url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_url().data(), static_cast<int>(this->input_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AnalysisConfig.input_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->input_url(), output);
  }

  // required string output_url = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_url().data(), static_cast<int>(this->output_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AnalysisConfig.output_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->output_url(), output);
  }

  // required string ttc_path = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ttc_path().data(), static_cast<int>(this->ttc_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AnalysisConfig.ttc_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ttc_path(), output);
  }

  // required string send_url = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->send_url().data(), static_cast<int>(this->send_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AnalysisConfig.send_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->send_url(), output);
  }

  // required uint32 detect_interval = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->detect_interval(), output);
  }

  // optional bool display = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->display(), output);
  }

  // optional bool open_modeling = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->open_modeling(), output);
  }

  // repeated .AlgorithmConfig algorithms = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->algorithms_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->algorithms(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AnalysisConfig)
}

::google::protobuf::uint8* AnalysisConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AnalysisConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string video_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_id().data(), static_cast<int>(this->video_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AnalysisConfig.video_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->video_id(), target);
  }

  // required string input_url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_url().data(), static_cast<int>(this->input_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AnalysisConfig.input_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->input_url(), target);
  }

  // required string output_url = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_url().data(), static_cast<int>(this->output_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AnalysisConfig.output_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->output_url(), target);
  }

  // required string ttc_path = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ttc_path().data(), static_cast<int>(this->ttc_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AnalysisConfig.ttc_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ttc_path(), target);
  }

  // required string send_url = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->send_url().data(), static_cast<int>(this->send_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AnalysisConfig.send_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->send_url(), target);
  }

  // required uint32 detect_interval = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->detect_interval(), target);
  }

  // optional bool display = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->display(), target);
  }

  // optional bool open_modeling = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->open_modeling(), target);
  }

  // repeated .AlgorithmConfig algorithms = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->algorithms_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->algorithms(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AnalysisConfig)
  return target;
}

size_t AnalysisConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AnalysisConfig)
  size_t total_size = 0;

  if (has_video_id()) {
    // required string video_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->video_id());
  }

  if (has_input_url()) {
    // required string input_url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->input_url());
  }

  if (has_output_url()) {
    // required string output_url = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output_url());
  }

  if (has_ttc_path()) {
    // required string ttc_path = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ttc_path());
  }

  if (has_send_url()) {
    // required string send_url = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->send_url());
  }

  if (has_detect_interval()) {
    // required uint32 detect_interval = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->detect_interval());
  }

  return total_size;
}
size_t AnalysisConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AnalysisConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string video_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->video_id());

    // required string input_url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->input_url());

    // required string output_url = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output_url());

    // required string ttc_path = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ttc_path());

    // required string send_url = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->send_url());

    // required uint32 detect_interval = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->detect_interval());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .AlgorithmConfig algorithms = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->algorithms_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->algorithms(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 192u) {
    // optional bool display = 7;
    if (has_display()) {
      total_size += 1 + 1;
    }

    // optional bool open_modeling = 8;
    if (has_open_modeling()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalysisConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AnalysisConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalysisConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnalysisConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AnalysisConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AnalysisConfig)
    MergeFrom(*source);
  }
}

void AnalysisConfig::MergeFrom(const AnalysisConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AnalysisConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  algorithms_.MergeFrom(from.algorithms_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_video_id();
      video_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_input_url();
      input_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_output_url();
      output_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_ttc_path();
      ttc_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ttc_path_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_send_url();
      send_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_url_);
    }
    if (cached_has_bits & 0x00000020u) {
      detect_interval_ = from.detect_interval_;
    }
    if (cached_has_bits & 0x00000040u) {
      display_ = from.display_;
    }
    if (cached_has_bits & 0x00000080u) {
      open_modeling_ = from.open_modeling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AnalysisConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AnalysisConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalysisConfig::CopyFrom(const AnalysisConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AnalysisConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalysisConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->algorithms())) return false;
  return true;
}

void AnalysisConfig::Swap(AnalysisConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalysisConfig::InternalSwap(AnalysisConfig* other) {
  using std::swap;
  CastToBase(&algorithms_)->InternalSwap(CastToBase(&other->algorithms_));
  video_id_.Swap(&other->video_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  input_url_.Swap(&other->input_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  output_url_.Swap(&other->output_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ttc_path_.Swap(&other->ttc_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  send_url_.Swap(&other->send_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(detect_interval_, other->detect_interval_);
  swap(display_, other->display_);
  swap(open_modeling_, other->open_modeling_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AnalysisConfig::GetMetadata() const {
  protobuf_AnalysisConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AnalysisConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AnalysisAlarm::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalysisAlarm::kIsActiveFieldNumber;
const int AnalysisAlarm::kSceneTypeFieldNumber;
const int AnalysisAlarm::kWaterColorFieldNumber;
const int AnalysisAlarm::kFloaterAreaFieldNumber;
const int AnalysisAlarm::kFloaterSpeedFieldNumber;
const int AnalysisAlarm::kWaterGaugeNumFieldNumber;
const int AnalysisAlarm::kRectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalysisAlarm::AnalysisAlarm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_AnalysisConfig_2eproto::scc_info_AnalysisAlarm.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:AnalysisAlarm)
}
AnalysisAlarm::AnalysisAlarm(const AnalysisAlarm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      rects_(from.rects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  water_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_water_color()) {
    water_color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.water_color_);
  }
  ::memcpy(&is_active_, &from.is_active_,
    static_cast<size_t>(reinterpret_cast<char*>(&water_gauge_num_) -
    reinterpret_cast<char*>(&is_active_)) + sizeof(water_gauge_num_));
  // @@protoc_insertion_point(copy_constructor:AnalysisAlarm)
}

void AnalysisAlarm::SharedCtor() {
  water_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_active_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&water_gauge_num_) -
      reinterpret_cast<char*>(&is_active_)) + sizeof(water_gauge_num_));
}

AnalysisAlarm::~AnalysisAlarm() {
  // @@protoc_insertion_point(destructor:AnalysisAlarm)
  SharedDtor();
}

void AnalysisAlarm::SharedDtor() {
  water_color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AnalysisAlarm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AnalysisAlarm::descriptor() {
  ::protobuf_AnalysisConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AnalysisConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnalysisAlarm& AnalysisAlarm::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_AnalysisConfig_2eproto::scc_info_AnalysisAlarm.base);
  return *internal_default_instance();
}


void AnalysisAlarm::Clear() {
// @@protoc_insertion_point(message_clear_start:AnalysisAlarm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rects_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    water_color_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 62u) {
    ::memset(&is_active_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&water_gauge_num_) -
        reinterpret_cast<char*>(&is_active_)) + sizeof(water_gauge_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AnalysisAlarm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AnalysisAlarm)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_active = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .AlgorithmType scene_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AlgorithmType_IsValid(value)) {
            set_scene_type(static_cast< ::AlgorithmType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string water_color = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_water_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->water_color().data(), static_cast<int>(this->water_color().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AnalysisAlarm.water_color");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float floater_area = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_floater_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &floater_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float floater_speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_floater_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &floater_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float water_gauge_num = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_water_gauge_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &water_gauge_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AnalysisRect rects = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AnalysisAlarm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AnalysisAlarm)
  return false;
#undef DO_
}

void AnalysisAlarm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AnalysisAlarm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool is_active = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_active(), output);
  }

  // required .AlgorithmType scene_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->scene_type(), output);
  }

  // optional string water_color = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->water_color().data(), static_cast<int>(this->water_color().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AnalysisAlarm.water_color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->water_color(), output);
  }

  // optional float floater_area = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->floater_area(), output);
  }

  // optional float floater_speed = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->floater_speed(), output);
  }

  // optional float water_gauge_num = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->water_gauge_num(), output);
  }

  // repeated .AnalysisRect rects = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->rects(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AnalysisAlarm)
}

::google::protobuf::uint8* AnalysisAlarm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AnalysisAlarm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool is_active = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_active(), target);
  }

  // required .AlgorithmType scene_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->scene_type(), target);
  }

  // optional string water_color = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->water_color().data(), static_cast<int>(this->water_color().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AnalysisAlarm.water_color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->water_color(), target);
  }

  // optional float floater_area = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->floater_area(), target);
  }

  // optional float floater_speed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->floater_speed(), target);
  }

  // optional float water_gauge_num = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->water_gauge_num(), target);
  }

  // repeated .AnalysisRect rects = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->rects(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AnalysisAlarm)
  return target;
}

size_t AnalysisAlarm::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AnalysisAlarm)
  size_t total_size = 0;

  if (has_is_active()) {
    // required bool is_active = 1;
    total_size += 1 + 1;
  }

  if (has_scene_type()) {
    // required .AlgorithmType scene_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->scene_type());
  }

  return total_size;
}
size_t AnalysisAlarm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AnalysisAlarm)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required bool is_active = 1;
    total_size += 1 + 1;

    // required .AlgorithmType scene_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->scene_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .AnalysisRect rects = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->rects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rects(static_cast<int>(i)));
    }
  }

  // optional string water_color = 3;
  if (has_water_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->water_color());
  }

  if (_has_bits_[0 / 32] & 56u) {
    // optional float floater_area = 4;
    if (has_floater_area()) {
      total_size += 1 + 4;
    }

    // optional float floater_speed = 5;
    if (has_floater_speed()) {
      total_size += 1 + 4;
    }

    // optional float water_gauge_num = 6;
    if (has_water_gauge_num()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalysisAlarm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AnalysisAlarm)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalysisAlarm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnalysisAlarm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AnalysisAlarm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AnalysisAlarm)
    MergeFrom(*source);
  }
}

void AnalysisAlarm::MergeFrom(const AnalysisAlarm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AnalysisAlarm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rects_.MergeFrom(from.rects_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_water_color();
      water_color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.water_color_);
    }
    if (cached_has_bits & 0x00000002u) {
      is_active_ = from.is_active_;
    }
    if (cached_has_bits & 0x00000004u) {
      scene_type_ = from.scene_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      floater_area_ = from.floater_area_;
    }
    if (cached_has_bits & 0x00000010u) {
      floater_speed_ = from.floater_speed_;
    }
    if (cached_has_bits & 0x00000020u) {
      water_gauge_num_ = from.water_gauge_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AnalysisAlarm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AnalysisAlarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalysisAlarm::CopyFrom(const AnalysisAlarm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AnalysisAlarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalysisAlarm::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->rects())) return false;
  return true;
}

void AnalysisAlarm::Swap(AnalysisAlarm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalysisAlarm::InternalSwap(AnalysisAlarm* other) {
  using std::swap;
  CastToBase(&rects_)->InternalSwap(CastToBase(&other->rects_));
  water_color_.Swap(&other->water_color_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_active_, other->is_active_);
  swap(scene_type_, other->scene_type_);
  swap(floater_area_, other->floater_area_);
  swap(floater_speed_, other->floater_speed_);
  swap(water_gauge_num_, other->water_gauge_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AnalysisAlarm::GetMetadata() const {
  protobuf_AnalysisConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AnalysisConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ConfigList* Arena::CreateMaybeMessage< ::ConfigList >(Arena* arena) {
  return Arena::CreateInternal< ::ConfigList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AnalysisRect* Arena::CreateMaybeMessage< ::AnalysisRect >(Arena* arena) {
  return Arena::CreateInternal< ::AnalysisRect >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AlgorithmConfig* Arena::CreateMaybeMessage< ::AlgorithmConfig >(Arena* arena) {
  return Arena::CreateInternal< ::AlgorithmConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AnalysisConfig* Arena::CreateMaybeMessage< ::AnalysisConfig >(Arena* arena) {
  return Arena::CreateInternal< ::AnalysisConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AnalysisAlarm* Arena::CreateMaybeMessage< ::AnalysisAlarm >(Arena* arena) {
  return Arena::CreateInternal< ::AnalysisAlarm >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
